#!/usr/bin/env bash
# Author: Aris Arjuna Noorsanto <exe.opcode@gmail.com>
# AI / AGI / AIM Unified Processing Tool - All-in-one
# License: Private / Inhouse Use Only

set -euo pipefail
IFS=$'\n\t'

# -----------------------
# AUTO START OLLAMA GEMMA3:1B
# -----------------------
if command -v ollama >/dev/null 2>&1; then
    pkill ollama 2>/dev/null || true
    log() { echo "[AI] $*"; }
    log "Starting Ollama Gemma3:1b server..."
    ollama serve &>/dev/null &
    sleep 2
    log "Ollama server running in background."
else
    echo "[AI] Ollama not installed. Skipping auto-start."
fi

# -----------------------
# CONFIG & BACKUP
# -----------------------
BACKUP_DIR="$HOME/.ai_backups"
mkdir -p "$BACKUP_DIR"

UNIVERSAL_LAW=$(cat <<'EOF'
:bof:
redo complete layout and design an advanced symetrics to proximity accordance for dedicated info-quota alignments, which grant a better adjustment for leading besides subliminal range compliance promisings, that affair any competing content relations into a cognitive intuitition guidance comparison between space and gap implies, that are suggesting the viewer a subcoordinated experience alongside repetitive tasks and stoic context sortings, all cooperational aligned to timed subjects of importance accordingly to random capacity within builds of data statements, that prognose the grid reliability of a mockup as given optically acknowledged for a more robust but also as attractive rulership into golden-ratio item handling
:eof:
EOF
)

# -----------------------
# HELPER FUNCTIONS
# -----------------------
log() { echo -e "[AI] $*"; }
backup_file() { local file="$1"; local timestamp=$(date +%Y%m%d%H%M%S); cp "$file" "$BACKUP_DIR/$(basename "$file").$timestamp.bak"; }
fetch_url() { local url="$1"; command -v curl &>/dev/null && curl -sL "$url" || command -v wget &>/dev/null && wget -qO- "$url"; }
get_prompt() { local input="$1"; [[ "$input" =~ ^https?:// ]] && fetch_url "$input" || [ -f "$input" ] && cat "$input" || echo "$input"; }

# -----------------------
# AI MODES
# -----------------------
mode_file() { for f in "$@"; do [ -f "$f" ] || continue; backup_file "$f"; echo "$UNIVERSAL_LAW" > "$f.processed"; log "Processed $f"; done; }
mode_script() { log "Processing script content..."; }
mode_batch() { local pattern="$1"; shift; for f in $pattern; do [ -f "$f" ] || continue; backup_file "$f"; log "Batch processed $f"; done; }
mode_env() { log "Scanning environment..."; env | sort; df -h; ls -la "$HOME"; ls -la /etc; }
mode_pipeline() { local files=("$@"); for f in "${files[@]}"; do backup_file "$f"; log "Pipeline processed $f"; done; }

# -----------------------
# AGI FUNCTIONS
# -----------------------
agi_watch() { local folder="$1"; local pattern="${2:-*}"; command -v inotifywait &>/dev/null || { log "Install inotify-tools"; return; }; log "Watching $folder"; inotifywait -m -r -e modify,create,move --format '%w%f' "$folder" | while read file; do [[ "$file" == $pattern ]] || continue; log "Detected change: $file"; ai_single "$file"; ai_readme_dynamic; agi_screenshot "portrait"; done; }
agi_screenshot() { local ratio="${1:-portrait}"; local timestamp=$(date +%Y%m%d%H%M%S); local screenshot_file="$BACKUP_DIR/screenshot_$timestamp.png"; command -v wkhtmltoimage &>/dev/null && wkhtmltoimage --quality 90 --javascript-delay 500 "$HOME/index.html" "$screenshot_file" && log "Screenshot $screenshot_file created" || touch "$screenshot_file"; }

# -----------------------
# AIM MONITOR
# -----------------------
aim_monitor() { log "AIM activated: MIME-aware monitoring (WIP)"; }

# -----------------------
# SINGLE-FILE / PIPELINE
# -----------------------
ai_single() { local file="$1"; [ -f "$file" ] || { log "File not found: $file"; return 1; }; backup_file "$file"; echo "$UNIVERSAL_LAW" > "$file.processed"; log "Single file processed"; }
ai_pipeline() { local files=("$@"); for f in "${files[@]}"; do ai_single "$f"; done; log "Pipeline complete"; }
ai_readme_dynamic() { local readme="$HOME/README.md"; log "Updating README"; cat > "$readme" << EOF
# ðŸ§  AI / AGI / AIM Unified Processing Tool
**Author:** Aris Arjuna Noorsanto <exe.opcode@gmail.com>
## Modes
- ai: single file
- ai +: script
- ai *: batch
- ai .: environment
- ai :: pipeline
- agi: watch files & screenshots
- aim: monitoring (MIME-aware)
## Backups
Hidden storage at $BACKUP_DIR
## Universal Law
$UNIVERSAL_LAW
EOF
}

# -----------------------
# ARGUMENT PARSING
# -----------------------
if [ $# -eq 0 ]; then log "No arguments. Usage: ai <mode> [files/patterns]"; exit 1; fi
case "$1" in
    -) shift; mode_file "$@" ;;
    +) shift; mode_script "$@" ;;
    \*) shift; mode_batch "$@" ;;
    .) shift; mode_env "$@" ;;
    :) shift; mode_pipeline "$@" ;;
    agi) shift; case "$1" in +) shift; agi_watch "$@" ;; -) shift; agi_screenshot "$@" ;; ~) shift; agi_watch "$@" ;; *) shift; agi_watch "$@" ;; esac ;;
    aim) shift; aim_monitor "$@" ;;
    *) PROMPT=$(get_prompt "$*"); log "Processing prompt..."; echo "$PROMPT" ;;
esac