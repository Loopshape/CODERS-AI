#!/usr/bin/env bash
# Author: Aris Arjuna Noorsanto <exe.opcode@gmail.com>
# AI / AGI / AIM Unified Processing Tool
set -euo pipefail
IFS=$'\n\t'

BACKUP_DIR="$HOME/.ai_backups"
FOLD_CACHE="$HOME/.ai_fold_cache"
mkdir -p "$BACKUP_DIR" "$FOLD_CACHE"

OLLAMA_BIN=$(command -v ollama || echo "$HOME/.local/bin/ollama")
UNIVERSAL_LAW=$(cat <<'EOF'
:bof:
redo complete layout and design an advanced symetrics to proximity accordance for dedicated info-quota alignments, ...
:eof:
EOF
)

log() { echo "[AI] $*"; }

backup_file() {
    local file="$1"
    local timestamp
    timestamp=$(date +%Y%m%d%H%M%S)
    cp "$file" "$BACKUP_DIR/$(basename "$file").$timestamp.bak"
}

fetch_url() {
    local url="$1"
    if command -v curl >/dev/null 2>&1; then
        curl -sL "$url"
    elif command -v wget >/dev/null 2>&1; then
        wget -qO- "$url"
    else
        log "Error: curl or wget required to fetch URLs."
        return 1
    fi
}

ollama_prompt() {
    local prompt="$1"
    "$OLLAMA_BIN" run gemma3:1b <<< "$prompt"
}

# -----------------------
# HTML/JS/CSS Enhancement
# -----------------------
enhance_html_dom() {
    local content="$1"
    # Inject neon theme if <head> exists
    if [[ "$content" == *"<head>"* && "$content" != *"--main-bg"* ]]; then
        local neon_theme="<head><style>:root { --main-bg:#8B0000; --main-fg:#fff; --btn-color:#ff00ff; --link-color:#ffff00; }</style>"
        content=$(echo "$content" | sed -E "s|<head>|$neon_theme|")
    fi
    # JS function annotations
    if command -v perl >/dev/null 2>&1; then
        content=$(echo "$content" | perl -0777 -pe 's|function\s+([a-zA-Z0-9_]+)\s*\((.*?)\)\s*\{(?!\s*\/\*\s*AI:)|function \1(\2) { /* AI: optimize this function */ |g')
    fi
    # Event listener annotations
    content=$(echo "$content" | sed -E "s|\.addEventListener\((['\"])(.*?)\1, (.*)\)|\.addEventListener(\1\2\1, /* AI: monitored */ \3)|g")
    # Semantic HTML
    content=$(echo "$content" | sed -E 's|<div class="section"|<section class="section"|g; s|</div><!-- .section -->|</section>|g')
    # ARIA roles
    content=$(echo "$content" | sed -E 's|<nav|<nav role="navigation"|g; s|<header|<header role="banner"|g; s|<main|<main role="main"|g; s|<footer|<footer role="contentinfo"|g')
    echo "$content"
}

# -----------------------
# Folding Logic
# -----------------------
fold_process_single() {
    local file="$1"
    local fold_id
    fold_id=$(md5sum "$file" | cut -d' ' -f1)
    local cached="$FOLD_CACHE/$fold_id.folded"

    if [[ -f "$cached" ]]; then
        log "Reusing cached AI output for $file"
        cat "$cached"
    else
        log "Processing $file recursively..."
        backup_file "$file"
        local content
        content=$(<"$file")
        content=$(enhance_html_dom "$content")
        local result
        result=$(ollama_prompt "$UNIVERSAL_LAW"$'\n'"$content")
        echo "$result" > "$cached"
        cat "$result"
    fi
}

fold_process_pipeline() {
    local files=("$@")
    local combined_hash
    combined_hash=$(echo "${files[@]}" | md5sum | cut -d' ' -f1)
    local cached="$FOLD_CACHE/$combined_hash.folded"

    if [[ -f "$cached" ]]; then
        log "Reusing cached AI output for pipeline: ${files[*]}"
        cat "$cached"
    else
        log "Processing pipeline recursively: ${files[*]}"
        local combined_content=""
        for f in "${files[@]}"; do
            if [[ "$f" =~ ^https?:// ]]; then
                combined_content+=$(fetch_url "$f" | enhance_html_dom; echo -e "\n---\n")
            elif [[ -f "$f" ]]; then
                backup_file "$f"
                combined_content+=$(<"$f" | enhance_html_dom; echo -e "\n---\n")
            fi
        done
        local result
        result=$(ollama_prompt "$UNIVERSAL_LAW"$'\n'"$combined_content")
        echo "$result" > "$cached"
        cat "$result"
    fi
}

# -----------------------
# AI Modes
# -----------------------
ai_single() {
    local file="$1"
    if [[ "$file" =~ ^https?:// ]]; then
        log "Processing URL: $file"
        fold_process_single <(fetch_url "$file") > "url.aiout"
        log "Output -> url.aiout"
    elif [[ -f "$file" ]]; then
        fold_process_single "$file" > "$file.aiout"
        log "Processed $file -> $file.aiout"
    else
        log "Input treated as prompt."
        ollama_prompt "$file"
    fi
}

ai_pipeline() {
    local files=("$@")
    fold_process_pipeline "${files[@]}" > "pipeline.aiout"
    log "Processed pipeline -> pipeline.aiout"
}

# -----------------------
# AGI / Monitoring
# -----------------------
agi_watch() {
    local folder="$1"
    local pattern="${2:-*}"
    command -v inotifywait >/dev/null 2>&1 || { log "Install inotify-tools"; return; }
    log "Watching $folder for pattern $pattern"
    inotifywait -m -r -e modify --format '%w%f' "$folder" | while read file; do
        [[ "$file" == $pattern ]] || continue
        log "Detected change: $file"
        ai_single "$file"
    done
}

agi_screenshot() {
    local target="$1"
    local ratio="${2:-portrait}"
    log "Generating virtual screenshot of $target ($ratio)..."
}

# -----------------------
# Entry Point
# -----------------------
if [ $# -eq 0 ]; then
    log "Usage: ai <mode> [files/URLs/folder]"
    exit 1
fi

case "$1" in
    :) shift; ai_pipeline "$@" ;;
    agi) shift
        case "$1" in
            +|~) shift; agi_watch "$@" ;;
            -) shift; agi_screenshot "$@" ;;
            *) shift; agi_watch "$@" ;;
        esac
        ;;
    *) ai_single "$1" ;;
esac