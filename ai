#!/usr/bin/env bash
# Author: Aris Arjuna Noorsanto <exe.opcode@gmail.com>
# AI / AGI / AIM Unified Processing Tool w/ Ollama gemma3:1b
# License: Private / In-House Use Only

set -euo pipefail
IFS=$'\n\t'

# -----------------------
# CONFIGURATION
# -----------------------
BACKUP_DIR="$HOME/.ai_backups"
mkdir -p "$BACKUP_DIR"

OLLAMA_MODEL="gemma3:1b"

UNIVERSAL_LAW=$(cat <<'EOF'
:bof:
redo complete layout and design an advanced symetrics to proximity accordance for dedicated info-quota alignments, which grant a better adjustment for leading besides subliminal range compliance promisings, that affair any competing content relations into a cognitive intuitition guidance comparison between space and gap implies, that are suggesting the viewer a subcoordinated experience alongside repetitive tasks and stoic context sortings, all cooperational aligned to timed subjects of importance accordingly to random capacity within builds of data statements, that prognose the grid reliability of a mockup as given optically acknowledged for a more robust but also as attractive rulership into golden-ratio item handling
:eof:
EOF
)

# -----------------------
# LOGGING
# -----------------------
log() { echo "[AI] $*"; }
log_info() { echo -e "\e[34m[*]\e[0m $*"; }
log_success() { echo -e "\e[32m[+]\e[0m $*"; }
log_warn() { echo -e "\e[33m[!]\e[0m $*"; }
log_error() { echo -e "\e[31m[-]\e[0m $*"; }

# -----------------------
# HELPERS
# -----------------------
backup_file() {
    local file="$1"
    [ -f "$file" ] || return
    local timestamp
    timestamp=$(date +%Y%m%d%H%M%S)
    cp "$file" "$BACKUP_DIR/$(basename "$file").$timestamp.bak"
    log_info "Backup created: $BACKUP_DIR/$(basename "$file").$timestamp.bak"
}

fetch_url() {
    local url="$1"
    if command -v curl >/dev/null 2>&1; then
        curl -sL "$url"
    elif command -v wget >/dev/null 2>&1; then
        wget -qO- "$url"
    else
        log_error "curl or wget required to fetch URLs."
    fi
}

get_prompt() {
    local input="$1"
    if [[ "$input" =~ ^https?:// ]]; then
        fetch_url "$input"
    elif [ -f "$input" ]; then
        cat "$input"
    else
        echo "$input"
    fi
}

# -----------------------
# OLLAMA INTEGRATION
# -----------------------
run_ollama() {
    local content="$1"
    if ! command -v ollama >/dev/null 2>&1; then
        log_error "Ollama CLI not found. Install Ollama and ensure 'ollama' command is in PATH."
        return 1
    fi
    echo "$content" | ollama run "$OLLAMA_MODEL"
}

# -----------------------
# AI MODES
# -----------------------
mode_file() {
    for f in "$@"; do
        [ -f "$f" ] || continue
        backup_file "$f"
        log_info "Processing file: $f with Ollama..."
        PROMPT=$(cat "$f"; echo -e "\n$UNIVERSAL_LAW")
        run_ollama "$PROMPT" > "$f.processed"
        log_success "Processed $f -> $f.processed"
    done
}

mode_script() {
    log_info "Processing script content..."
    # Placeholder: extend script logic here
}

mode_batch() {
    local pattern="$1"
    shift
    for f in $pattern; do
        [ -f "$f" ] || continue
        backup_file "$f"
        log_info "Batch processing $f with Ollama..."
        PROMPT=$(cat "$f"; echo -e "\n$UNIVERSAL_LAW")
        run_ollama "$PROMPT" > "$f.processed"
    done
}

mode_env() {
    log_info "Scanning environment..."
    env | sort
    df -h
    ls -la "$HOME"
    ls -la /etc
}

mode_pipeline() {
    local files=("$@")
    for f in "${files[@]}"; do
        [ -f "$f" ] || continue
        log_info "Pipeline processing: $f with Ollama..."
        backup_file "$f"
        PROMPT=$(cat "$f"; echo -e "\n$UNIVERSAL_LAW")
        run_ollama "$PROMPT" > "$f.processed"
    done
}

# -----------------------
# AGI MODES
# -----------------------
agi_watch() {
    local folder="$1"
    local pattern="${2:-*}"
    log_info "Watching $folder for pattern $pattern"
    command -v inotifywait >/dev/null 2>&1 || { log_error "Install inotify-tools"; return 1; }
    inotifywait -m -r -e modify,create,move --format '%w%f' "$folder" | while read -r file; do
        [[ "$file" == $pattern ]] || continue
        log_warn "Change detected: $file"
        mode_file "$file"
    done
}

agi_screenshot() {
    local ratio="${1:-portrait}"
    log_info "Generating virtual screenshot ($ratio)..."
    # Placeholder: implement headless screenshot logic
}

# -----------------------
# AIM MONITOR
# -----------------------
aim_monitor() {
    log_info "AIM monitoring activated (placeholder)"
    sleep 1
}

# -----------------------
# ARGUMENT PARSING
# -----------------------
if [ $# -eq 0 ]; then
    log_info "Usage: ai <mode> [files/patterns] [prompt]"
    exit 1
fi

case "$1" in
    -) shift; mode_file "$@" ;;
    +) shift; mode_script "$@" ;;
    \*) shift; mode_batch "$@" ;;
    .) shift; mode_env "$@" ;;
    :) shift; mode_pipeline "$@" ;;
    agi)
        shift
        case "$1" in
            +|~) shift; agi_watch "$@" ;;
            -) shift; agi_screenshot "$@" ;;
            *) shift; agi_watch "$@" ;;
        esac
        ;;
    aim) shift; aim_monitor "$@" ;;
    *)
        PROMPT=$(get_prompt "$*"; echo -e "\n$UNIVERSAL_LAW")
        log_info "Processing prompt/input with Ollama..."
        run_ollama "$PROMPT"
        ;;
esac